import React, { useState, useEffect } from "react";
import { Autocomplete, TextField } from "@mui/material";

interface UserFilterFieldProps {
  name: string;
  label: string;
  users: any;
  value: string;
  title: string;
  onChange: (event: React.ChangeEvent<any>) => void;
}

export const UserFilterField: React.FC<UserFilterFieldProps> = ({
  name,
  label,
  users,
  onChange,
  value,
  title,
}) => {
  const [selectedName, setSelectedName] = useState<any>(null);
  const [showAutocomplete, setShowAutocomplete] = useState<boolean>(true);
  const newUsers = () => {
    return users.map((u: any) => {
      return {
        id: u.Id,
        title: u.Title,
      };
    });
  };

  useEffect(() => {
    if (value && Array.isArray(users) && users.length > 0) {
      const user = users.find((u: any) => u.Id === value);
      const newUser = {
        id: user.Id,
        title: user.Title,
      };
      setSelectedName(newUser);
    } else {
      setSelectedName("");
    }
  }, [users, value]);
  const handleNameChange = (event: any, newValue: any) => {
    setSelectedName(newValue);
    const newEvent = {
      ...event,
      target: {
        ...event.target,
        name: name,
        value: newValue?.id,
      },
    };
    onChange(newEvent);
  };

  const toggleAutocompleteVisibility = () => {
    setShowAutocomplete(!showAutocomplete); // Cambia la visibilidad del Autocomplete
  };

  return (
    <div>
      <button onClick={toggleAutocompleteVisibility}>
        {showAutocomplete ? "Ocultar" : "Mostrar"} Autocomplete
      </button>

      {showAutocomplete && (
        <Autocomplete
          options={newUsers()}
          getOptionLabel={(option) => option.title}
          renderInput={(params) => (
            <TextField {...params} label="Buscar nombre" variant="outlined" />
          )}
          value={selectedName}
          onChange={handleNameChange}
        />
      )}

      {/* Elemento oculto para el ID seleccionado */}
      <input type="hidden" value={selectedName?.id ?? ""} />
    </div>
  );
};



const CustomTextField = styled(TextField)({
  '& .MuiInputBase-input': {
    color: 'blue', // Cambia el color del texto
  },
  '& .MuiInputLabel-root': {
    color: 'green', // Cambia el color de la etiqueta
  },
  '& .MuiOutlinedInput-notchedOutline': {
    borderColor: 'purple', // Cambia el color del borde
  },
});
